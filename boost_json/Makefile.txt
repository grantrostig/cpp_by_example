# Copyright (c) UNKNOW, but otherwise: 2017 Grant Rostig. All rights reserved. License: Boost v1.0 
   
# THIS gives us the path/filename to this makefile. it is used to trigger full rebuilds if the makefile itself has changed.
THIS := $(realpath $(firstword $(MAKEFILE_LIST)))

APP_NAME ?= a.out

# we'll use CPU_COUNT as the default max thread count for the gen_deps function if -j isn't used,
# or if -j is used without an explicit job count argument.
CPU_COUNT != grep -c ^processor /proc/cpuinfo

# --no-builtin-rules: we're not taking advantage of any implicit make rules - can potentially improve performance.
# -j$(CPU_COUNT): we're forcing -j-j$(CPU_COUNT) since the dependency graph is automated and should be complete.
MAKEFLAGS += --no-builtin-rules -j$(CPU_COUNT)

### explicit definitions of directories keep automation features consistent and easier to maintain.
# all output generated by the build will be placed in the build directory (or some sub-directory of it).
BLD_DIR ?= ./build
# include directory for project's main header files
MAIN_INC_DIR := ./inc
# source directory for project's main source files
MAIN_SRC_DIR := ./src
# obj directory for object files generated during the build from project's main source file(s)
MAIN_OBJ_DIR := $(BLD_DIR)/obj
# each source file will have an associated dependency cache file placed in this directory
DEP_CACHE_DIR := $(BLD_DIR)/dep

# automatic list of source files found in the main source directory - assumes .cpp extension
MAIN_SRCS := $(wildcard $(MAIN_SRC_DIR)/*.cpp)
# automatic list of .o files generated from the main source list
MAIN_OBJS := $(addsuffix .o,$(addprefix $(MAIN_OBJ_DIR)/,$(basename $(notdir $(MAIN_SRCS)))))
# optional list of dependency files - only generated by audit rule. these are the complete make rule deps, not the dep cache files.
MAIN_OBJ_DEPS := $(addsuffix .dep,$(MAIN_OBJS))
# list of dependency graph files - these are the actual dependency cache.
MAIN_SRC_DEPS := $(addsuffix .d,$(addprefix $(DEP_CACHE_DIR)/,$(basename $(notdir $(MAIN_SRCS)))))
# default path/name of primary executable
MAIN_PROGRAM ?= $(BLD_DIR)/$(APP_NAME)

# INC_SYSTEM is only needed when additional system paths need to be specified. put them after the comma - separated by spaces.
# -isystem is only used for #include directives using <>
# do not use this for include paths within your project's directory tree - it will break the dependency graph.
# don't uncomment unless you're actually providing directory value(s).
#INC_SYSTEM := $(addprefix -isystem, )

# paths needed to resolve #include directives with "" - should only be used for directories located within your project directory tree.
# additional paths can be added after $(MAIN_INC_DIR) - separated by spaces.
# do not use this for include paths in system directories or 3rd party library paths outside of your project's directory tree - it will
# break the dependency graph.
INC_QUOTE := $(addprefix -iquote,$(MAIN_INC_DIR))

# default to c++23 language standard
# override at the command line like this: make CXXSTD=c++26
CXXSTD ?= c++23

# release rule (or build target if you prefer) compiles with -O3 and -ggdb0 by default, otherwise the deaults are -O0 and -ggdb3.
# override at the command line like this: make CXXOPT=2 CXXDBG=1
ifeq ($(findstring release,$(MAKECMDGOALS)),release)
    CXXOPT ?= 3
    CXXDBG ?= 0
else
    CXXOPT ?= 0
    CXXDBG ?= 3
endif

# c preprocessor flags - important to keep separate from compilation flags (CXXFLAGS) for dependency generation.
CPPFLAGS := $(INC_QUOTE) $(INC_SYSTEM)

# c++ compilation flags
# if using optimization level 0 (-O0) the first condition will ensure _FORTIFY_SOURCE is *not* used, otherwise turn it on.
# some systems/environments turn _FORTIFY_SOURCE on implicitly.
# note the use of -Werror ...you probably want to remove that - i like to have it on by default.
# -Wno-unused-command-line-argument -Wno-unknown-warning-option are to make it easier to switch between gcc and clang - gcc complains about
# those flags if there are *other* warnings/errors, but silently ignores them if there are no other issues - weird. clang doesn't support
# this entire set of warnings, so they signal to clang to ignore unsupported warning flags.
CXXFLAGS = $(if $(findstring 0,$(CXXOPT)),-U_FORTIFY_SOURCE,-D_FORTIFY_SOURCE) -std=$(CXXSTD) -O$(CXXOPT) -ggdb$(CXXDBG) \
	-Weffc++ -Wextra -Wall -Wconversion -Wshadow -Wpedantic -Wsign-promo -Wnon-virtual-dtor -Wcast-align -Woverloaded-virtual \
	-Wunused -pedantic -Wsign-conversion -Wsuggest-final-types -Wsuggest-final-methods -Wsuggest-override -Wformat=2 -Wduplicated-cond \
	-Wduplicated-branches -Wlogical-op -Wno-unused-command-line-argument -Wno-unknown-warning-option

LDLIBS = -lpthread -lstdc++_libbacktrace -lrt


# flags that assist in creation of the dependency graph files.
DEPFLAGS = -MT $@ -MMD -MP -MF $(DEP_CACHE_DIR)/$(*F).d

# there appears to be a gcc bug that occasionally causes the .d file to be written to disk *after* the compilation target.
# if the .d file is newer than the compilation target then it will rebuild when it doesn't need to. these mechanisms will set the .d file 
# time stamp to match the associated compilation target
FIX_DEP_STAMP = @touch -r $@ $(DEP_CACHE_DIR)/$(basename $(notdir $@)).d

# supports "audit" rule. expands a space delimited list to a newline delimited list.
EXPAND_LINES := sed 's/ /\n/g'
# for "audit" rule - creates a file containing a list of dependencies. note that this differs from the dependency cache files - this will
# include any additional dependencies specified in the makefile in addition to what's in the dependency cache.
EXPORT_DEPENDENCIES = $(if $(DUMP_DEPS),@printf '$^' | $(EXPAND_LINES) >$(addsuffix .dep,$@))
# use MKDIR for order-only rules to automatically create a destination directory - do not use on .PHONY rules.
# i have no idea why, but this outperforms the traditional "explicit rule for directory creation" method in larger projects.
MKDIR = $$(shell mkdir -p $$(@D))

# a file is generated to track compilation options used.
# this is to automatically trigger a full rebuild when compiler flags or build targets change.
# without this, make would only do an incremental build when changing compiler and/or compilation flags and/or build targets.
MAKE_OPTS_FILE := $(BLD_DIR)/make.opts
ifeq ($(wildcard $(MAKE_OPTS_FILE)),)
    $(shell mkdir -p $(BLD_DIR) && touch -f $(MAKE_OPTS_FILE))
endif

# we want to trigger a full rebuild if any of the settings/goals differ from the previous build.
# PREV_OPTS contains the settings loaded from MAKE_OPTS_FILE (previous build, if any).
PREV_OPTS = $(file <$(MAKE_OPTS_FILE))
# CURR_OPTS are the settings of the currently running make.
CURR_OPTS = $(filter-out run .DEFAULT debug all diagnostic,$(MAKECMDGOALS)) $(CXX) -std=$(CXXSTD) -O$(CXXOPT) -ggdb$(CXXDBG) $(STRIP_BINS)

# update the MAKE_OPTS_FILE if PREV_OPTS and CURR_OPTS differ, but skip this step if we're running a diagnostic.
# this mechanism won't work properly if you combine diagnostic with any of the other goals.
ifneq ($(findstring diagnostic,$(MAKECMDGOALS)),diagnostic)
    ifneq ($(PREV_OPTS),$(CURR_OPTS))
        $(file >$(MAKE_OPTS_FILE),$(CURR_OPTS))
    endif
endif

all: $(MAIN_PROGRAM)
debug: all
release: STRIP_BINS := 1
release: all

audit: DUMP_DEPS = 1
audit: $(BLD_DIR)/audit.list

# clean removes all files throughout the $(BLD_DIR) tree, but ignores anything in the $(DEP_CACHE_DIR).
# directories are not deleted.
# note that if your program creates any additional files in the $(BLD_DIR) tree, they will be deleted.
clean:
	find $(BLD_DIR) -path $(DEP_CACHE_DIR) -prune -o -type f -print0 | xargs -0 rm -fv

# purge will remove the entire $(BLD_DIR) unconditionally, including the dependency graph cache.
purge:
	rm -R $(BLD_DIR)

# run rule will ensure build is up to date and run the $(MAIN_PROGRAM)
run: all
	$(MAIN_PROGRAM)

# second expansion is required (see uses of $$). this tells make that it needs to make 2 passes to fully resolve some variable expansions.
.SECONDEXPANSION:

# if the build is interrupted, removing any output files that may be incomplete.
.DELETE_ON_ERROR:

# these rules aren't associated a specific file or dir
.PHONY: all debug release audit clean purge diagnostic run

# idiomatic directory creation rule - try to avoid these except when needed for PHONY goals (see also MKDIR definition above).
$(DEP_CACHE_DIR): ; @mkdir -p $@

# weird quirk - we refresh the MAKE_OPTS_FILE manually (see above), so this is just to satisfy make's desire to update it.
$(MAKE_OPTS_FILE): ;

# this adds this makefile and the build options file as extra prerequisites of all obj build targets in the MAIN_OBJS group.
$(MAIN_OBJS): .EXTRA_PREREQS = $(THIS) $(MAKE_OPTS_FILE)

# pattern rule to compile our main obj files (note: no linking).
# this loads the associated dependency cache file for the matched target.
$(MAIN_OBJ_DIR)/%.o: $(DEP_CACHE_DIR)/%.d | $(MKDIR) $(DEP_CACHE_DIR)
	$(EXPORT_DEPENDENCIES)
	$(CXX) $(DEPFLAGS) $(CPPFLAGS) $(CXXFLAGS) -c $(MAIN_SRC_DIR)/$(*F).cpp -o $@
	$(FIX_DEP_STAMP)

# to support the "audit" goal - this creates a master list of *all* dependencies for the entire build - sorted and duplicates removed.
$(BLD_DIR)/audit.list: all
	find $(BLD_DIR) -type f -name *.dep | xargs sort -u -o $@

# this rule is just a link step - takes all main objs and links them to produce the specified main program.
$(MAIN_PROGRAM): $(MAIN_OBJS) | $(MKDIR)
	$(CXX) $(if $(findstring 1,$(STRIP_BINS)),-s) $^ -o $@ $(LDFLAGS) $(LDLIBS)

$(MAIN_SRC_DEPS): ;
include $(wildcard $(MAIN_SRC_DEPS))

# diagnostic goal is completely optional - can be removed. can help diagnose issues with the build process itself. will show the majority of
# variables used, their origin, and their value, along with some tooling info.
# the origin refers to where the value was last set: this file, environment variable, command line, etc..
# note that no actual build/compilation takes place when using the diagnostic goal.
diagnostic: private TERM_RESET  := \033[0m
diagnostic: private TERM_HEADER := \033[97;1m\033[44m
diagnostic: private TERM_BLUE   := \033[34;1m
diagnostic:
	@printf '$(TERM_HEADER)tooling$(TERM_RESET)\n'
	@printf '$(TERM_BLUE)THIS [$(origin THIS)]: $(TERM_RESET)$(THIS)\n'
	@printf '$(TERM_BLUE)CPP [$(origin CPP)]: $(TERM_RESET)$(shell which $(CPP))\n'
	@printf '$(TERM_BLUE)$(CPP) version: $(TERM_RESET)$(shell $(CPP) --version | head -1)\n'
	@printf '$(TERM_BLUE)CXX [$(origin CXX)]: $(TERM_RESET)$(shell which $(CXX))\n'
	@printf '$(TERM_BLUE)$(CXX) version: $(TERM_RESET)$(shell $(CXX) --version | head -1)\n'
	@printf '$(TERM_BLUE)MAKE [$(origin MAKE)]: $(TERM_RESET)$(shell which make)\n'
	@printf '$(TERM_BLUE)make version: $(TERM_RESET)$(shell make --version | head -1)\n'
	@printf '$(TERM_BLUE)make features: $(TERM_RESET)$(.FEATURES)\n'
	@printf '$(TERM_BLUE)SHELL [$(origin SHELL)]: $(TERM_RESET)$(shell which $(SHELL))\n'
	@printf '$(TERM_HEADER)build settings$(TERM_RESET)\n'
	@printf '$(TERM_BLUE)default goal: $(TERM_RESET)$(.DEFAULT_GOAL)\n'
	@printf '$(TERM_BLUE)MAKEFLAGS: $(TERM_RESET)$(MAKEFLAGS)\n'
	@printf '$(TERM_BLUE)CXXSTD [$(origin CXXSTD)]: $(TERM_RESET)$(CXXSTD)\n'
	@printf '$(TERM_BLUE)CXXOPT [$(origin CXXOPT)]: $(TERM_RESET)$(CXXOPT)\n'
	@printf '$(TERM_BLUE)CXXDBG [$(origin CXXDBG)]: $(TERM_RESET)$(CXXDBG)\n'
	@printf '$(TERM_BLUE)CPPFLAGS [$(origin CPPFLAGS)]: $(TERM_RESET)$(CPPFLAGS)\n'
	@printf '$(TERM_BLUE)CXXFLAGS [$(origin CXXFLAGS)]: $(TERM_RESET)$(CXXFLAGS)\n'
	@printf '$(TERM_HEADER)build management$(TERM_RESET)\n'
	@printf '$(TERM_BLUE)MAKE_J_FLAG: $(MAKE_J_FLAG)$(TERM_RESET)\n'
	@printf '$(TERM_BLUE)MAKE_J_VALUE: $(MAKE_J_VALUE)$(TERM_RESET)\n'
	@printf '$(TERM_BLUE)DUMP_DEPS [$(origin DUMP_DEPS)]: $(TERM_RESET)$(DUMP_DEPS)\n'
	@printf '$(TERM_BLUE)MAKE_OPTS_FILE [$(origin MAKE_OPTS_FILE)]: $(TERM_RESET)$(MAKE_OPTS_FILE)\n'
	@printf '$(TERM_BLUE)PREV_OPTS [$(origin PREV_OPTS)]: $(TERM_RESET)$(file <$(MAKE_OPTS_FILE))\n'
	@printf '$(TERM_HEADER)_DIR variables$(TERM_RESET)\n'
	@printf \
		'$(foreach var,$(.VARIABLES), \
			$(if $(findstring _DIR,$(var)), \
				$(if $(findstring _DIRS,$(var)),, \
					$(TERM_BLUE)$(var) [$(origin $(var))]: $(TERM_RESET)$($(var))\n)))' | sed 's/^[[:space:]]*//' | sort
	@printf '$(TERM_HEADER)_SRCS variables$(TERM_RESET)\n'
	@printf \
		'$(foreach var,$(.VARIABLES), \
			$(if $(findstring _SRCS,$(var)), \
				$(TERM_BLUE)$(var) [$(origin $(var))]: $(TERM_RESET)$($(var))\n))' | sed 's/^[[:space:]]*//' | sort
	@printf '$(TERM_HEADER)_DEPS variables$(TERM_RESET)\n'
	@printf \
		'$(foreach var,$(.VARIABLES), \
			$(if $(findstring _DEPS,$(var)), \
				$(TERM_BLUE)$(var) [$(origin $(var))]: $(TERM_RESET)$($(var))\n))' | sed 's/^[[:space:]]*//' | sort
	@printf '$(TERM_HEADER)_OBJS variables$(TERM_RESET)\n'
	@printf \
		'$(foreach var,$(.VARIABLES), \
			$(if $(findstring _OBJS,$(var)), \
				$(TERM_BLUE)$(var) [$(origin $(var))]: $(TERM_RESET)$($(var))\n))' | sed 's/^[[:space:]]*//' | sort
